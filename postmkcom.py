import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import urllib3
from gspread_formatting import *
import json # C·∫ßn import json cho h√†m m·ªõi

# T·∫Øt c·∫£nh b√°o InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- Kh√¥i ph·ª•c h√†m get_all_products g·ªëc ---
def get_all_products(site_url, consumer_key, consumer_secret):
    page = 1
    all_products = []
    
    while True:
        products_url = f"{site_url}/wp-json/wc/v3/products?per_page=100&page={page}"
        
        try:
            response = requests.get(
                products_url,
                auth=(consumer_key, consumer_secret),
                verify=False
            )
            
            if response.status_code == 200:
                products = response.json()
                if not products:
                    break
                    
                for product in products:
                    date_modified = product.get('date_modified', '')
                    if date_modified:
                        from datetime import datetime
                        date_obj = datetime.strptime(date_modified, "%Y-%m-%dT%H:%M:%S")
                        date_modified = date_obj.strftime("%d/%m/%Y %H:%M")
                    
                    modified_by = product.get('modified_by', '')
                    
                    product_info = {
                        'id': product.get('id', ''),
                        'name': product.get('name', ''),
                        'status': product.get('status', ''),
                        'stock_status': 'C√≤n h√†ng' if product.get('stock_status') == 'instock' else 'H·∫øt h√†ng',
                        'date_modified': date_modified,
                        'modified_by': modified_by,
                        'permalink': product.get('permalink', ''),
                        'description': product.get('description', '')
                    }
                    all_products.append(product_info)
                
                print(f"ƒê√£ l·∫•y {len(all_products)} s·∫£n ph·∫©m...")
                page += 1
            else:
                print(f"L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m: {response.text}")
                break
                
        except requests.exceptions.RequestException as e:
            print(f"L·ªói k·∫øt n·ªëi khi l·∫•y danh s√°ch s·∫£n ph·∫©m: {e}")
            break
    
    return all_products

# --- H√†m m·ªõi ƒë·ªÉ ki·ªÉm tra API s·∫£n ph·∫©m ƒë∆°n l·∫ª ---
def check_single_product_api(site_url, consumer_key, consumer_secret, product_id):
    product_url = f"{site_url}/wp-json/wc/v3/products/{product_id}"
    print(f"\n--- ƒêang ki·ªÉm tra API cho s·∫£n ph·∫©m ID: {product_id} ---")
    try:
        response = requests.get(
            product_url,
            auth=(consumer_key, consumer_secret),
            verify=False
        )

        if response.status_code == 200:
            product_data = response.json()
            print("Y√™u c·∫ßu th√†nh c√¥ng. D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:")
            # In to√†n b·ªô d·ªØ li·ªáu s·∫£n ph·∫©m v·ªõi ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
            print(json.dumps(product_data, indent=4))
            # Ki·ªÉm tra tr·ª±c ti·∫øp tr∆∞·ªùng description trong d·ªØ li·ªáu n√†y
            description = product_data.get('description', '')
            print(f"\nTr∆∞·ªùng 'description' c√≥ t·ªìn t·∫°i: {'description' in product_data}")
            # S·ª≠a l·ªói c√∫ ph√°p f-string ·ªü d√≤ng n√†y
            print(f'100 k√Ω t·ª± ƒë·∫ßu c·ªßa description: {description[:100]}...') # S·ª≠ d·ª•ng d·∫•u nh√°y ƒë∆°n cho f-string
            # S·ª≠a l·ªói c√∫ ph√°p f-string ·ªü d√≤ng n√†y
            print(f'Description c√≥ ch·ª©a \'<table class="cauhinh"\': {\'<table class="cauhinh"\' in description}') # S·ª≠ d·ª•ng d·∫•u nh√°y ƒë∆°n cho f-string v√† tho√°t d·∫•u nh√°y ƒë∆°n trong chu·ªói c·ªë ƒë·ªãnh

        else:
            print(f"Y√™u c·∫ßu th·∫•t b·∫°i. Status code: {response.status_code}")
            print(f"Response text: {response.text}")

    except requests.exceptions.RequestException as e:
        print(f"L·ªói k·∫øt n·ªëi khi ki·ªÉm tra s·∫£n ph·∫©m ID {product_id}: {e}")

    print("-----------------------------------------------\n")

def export_to_sheets(products, spreadsheet_url):
    # Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p Google Sheets
    scope = ['https://spreadsheets.google.com/feeds',
             'https://www.googleapis.com/auth/drive']
    
    credentials = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    client = gspread.authorize(credentials)
    
    # M·ªü spreadsheet
    spreadsheet = client.open_by_url(spreadsheet_url)
    
    # T·∫°o worksheet m·ªõi t√™n "MKCOM" ho·∫∑c s·ª≠ d·ª•ng n·∫øu ƒë√£ t·ªìn t·∫°i
    try:
        worksheet = spreadsheet.worksheet("MKCOM")
    except:
        worksheet = spreadsheet.add_worksheet(title="MKCOM", rows="300", cols="8") # V·∫´n t·∫°o 8 c·ªôt
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu v·ªõi 8 c·ªôt
    data = [["B√†i Post", "Tr·∫°ng th√°i", "Hi·ªÉn th·ªã", "S·ªë l∆∞·ª£ng", "C·∫≠p nh·∫≠t l·∫ßn cu·ªëi", "T√†i kho·∫£n", "Link s·ª≠a", "Edit"]] # Header 8 c·ªôt

    # Th√™m th√¥ng tin s·∫£n ph·∫©m v√†o d·ªØ li·ªáu
    for product in products:
        # T·∫°o link s·ª≠a t·ª´ ID s·∫£n ph·∫©m
        edit_link = f"https://minhkhoicomputer.com/wp-admin/post.php?post={product.get('id', '')}&action=edit" # S·ª≠ d·ª•ng .get() ph√≤ng tr∆∞·ªùng h·ª£p thi·∫øu ID
        # Thay ƒë·ªïi hi·ªÉn th·ªã s·ªë l∆∞·ª£ng
        stock_status = "-" if product.get('stock_status') == 'H·∫øt h√†ng' else product.get('stock_status', '') # S·ª≠ d·ª•ng .get()

        # L·∫•y tr·∫°ng th√°i g·ªëc t·ª´ API
        original_status = product.get('status', '')
        
        # X·ª≠ l√Ω c·ªôt Tr·∫°ng th√°i v·ªõi icon
        status_icon = "-"
        if original_status == 'publish':
            status_icon = 'üëÄ'  # Icon con m·∫Øt cho tr·∫°ng th√°i hi·ªÉn th·ªã
        elif original_status == 'pending':
            status_icon = '‚è∞'  # Icon ƒë·ªìng h·ªì cho tr·∫°ng th√°i ch·ªù duy·ªát
        elif original_status == 'private':
            status_icon = 'üîí'  # Icon kh√≥a cho tr·∫°ng th√°i ri√™ng t∆∞
        elif original_status == 'draft':
            status_icon = 'üìù'  # Icon nh√°p cho tr·∫°ng th√°i nh√°p
        
        # X·ª≠ l√Ω c·ªôt Hi·ªÉn th·ªã (v·∫´n d√πng vƒÉn b·∫£n)
        display_status = "-"
        if original_status == 'publish' or original_status == 'pending':
            display_status = 'C√¥ng khai'
        elif original_status == 'private':
            display_status = 'Ri√™ng t∆∞'
        # Th√¥ng tin 'ƒê∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u' kh√¥ng c√≥ trong tr∆∞·ªùng 'status' c·ªßa API WooCommerce.
        
        # K·∫øt h·ª£p t√™n s·∫£n ph·∫©m v√† permalink v√†o m·ªôt √¥
        combined_post_info = f"{product.get('name', '')}\n{product.get('permalink', '')}"

        # L·∫•y description
        description = product.get('description', '')

        # Ki·ªÉm tra s·ª± hi·ªán di·ªán c·ªßa c·∫£ hai chu·ªói
        has_cauhinh_table = description and '<table class="cauhinh"' in description
        has_notcauhinh_table = description and '<table class="notcauhinh"' in description

        # --- Logic m·ªõi cho c·ªôt Edit ---
        edited_status = '-' # M·∫∑c ƒë·ªãnh l√† '-'
        if has_cauhinh_table:
            edited_status = '‚úèÔ∏è' # N·∫øu c√≥ cauhinh, d√πng icon b√∫t
        elif has_notcauhinh_table:
            edited_status = '‚úèÔ∏è' # N·∫øu kh√¥ng c√≥ cauhinh nh∆∞ng c√≥ notcauhinh, d√πng icon th√¥ng tin (b·∫°n c√≥ th·ªÉ ƒë·ªïi icon n√†y)
        # --- K·∫øt th√∫c logic m·ªõi ---

        data.append([
            combined_post_info, # S·ª≠ d·ª•ng th√¥ng tin k·∫øt h·ª£p
            status_icon,  # S·ª≠ d·ª•ng icon cho c·ªôt Tr·∫°ng th√°i
            display_status, # S·ª≠ d·ª•ng vƒÉn b·∫£n cho c·ªôt Hi·ªÉn th·ªã
            stock_status,
            product.get('date_modified', ''), # S·ª≠ d·ª•ng .get()
            product.get('modified_by', ''), # S·ª≠ d·ª•ng .get()
            edit_link,
            edited_status # S·ª≠ d·ª•ng tr·∫°ng th√°i Edit v·ªõi logic m·ªõi
        ])
    
    # X√≥a d·ªØ li·ªáu c≈© v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
    worksheet.clear()
    
    # C·∫≠p nh·∫≠t d·ªØ li·ªáu theo t·ª´ng batch (t·ª´ A ƒë·∫øn H)
    batch_size = 100
    for i in range(0, len(data), batch_size):
        batch = data[i:i + batch_size]
        range_name = f'A{i+1}:H{i+len(batch)}' # C·∫≠p nh·∫≠t ph·∫°m vi batch
        worksheet.update(range_name, batch)
        print(f"ƒê√£ c·∫≠p nh·∫≠t {i+1} ƒë·∫øn {i+len(batch)} d√≤ng")
    
    # ƒê·ªãnh d·∫°ng ƒë·ªô r·ªông c·ªôt
    header_format = CellFormat(
        backgroundColor=Color(0.2, 0.6, 0.86),
        textFormat=TextFormat(bold=True, fontFamily='Arial', fontSize=11, foregroundColor=Color(1,1,1)),
        padding=Padding(left=5, top=5, right=5, bottom=5)
    )
    format_cell_range(worksheet, 'A1:H1', header_format) # √Åp d·ª•ng cho A1:H1

    wrap_format = CellFormat(
        wrapStrategy='WRAP',
        padding=Padding(left=5, top=5, right=5, bottom=5)
    )
    format_cell_range(worksheet, 'A2:A300', wrap_format) # Ch·ªâ √°p d·ª•ng cho c·ªôt A

    padding_format = CellFormat(
        padding=Padding(left=5, top=5, right=5, bottom=5)
    )
    format_cell_range(worksheet, 'A2:H300', padding_format) # √Åp d·ª•ng cho A2:H300

    center_format = CellFormat(
        horizontalAlignment='CENTER',
    )
    format_cell_range(worksheet, 'B1:F300', center_format) # CƒÉn gi·ªØa B ƒë·∫øn F
    format_cell_range(worksheet, 'H1:H300', center_format) # CƒÉn gi·ªØa H (Edit)

    left_format = CellFormat(
        horizontalAlignment='LEFT',
    )
    format_cell_range(worksheet, 'A1:A300', left_format) # CƒÉn tr√°i A
    format_cell_range(worksheet, 'G1:G300', left_format) # CƒÉn tr√°i G

    middle_format = CellFormat(
        verticalAlignment='MIDDLE'
    )
    format_cell_range(worksheet, 'A1:H300', middle_format) # CƒÉn gi·ªØa d·ªçc A ƒë·∫øn H

    worksheet.freeze(rows=1)
    
    # ƒêi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt (Th√™m c·ªôt H)
    set_column_width(worksheet, 'A', 800) # B√†i Post (t√™n + link)
    set_column_width(worksheet, 'B', 90)  # Tr·∫°ng th√°i
    set_column_width(worksheet, 'C', 90)  # Hi·ªÉn th·ªã
    set_column_width(worksheet, 'D', 90)  # S·ªë l∆∞·ª£ng
    set_column_width(worksheet, 'E', 150) # C·∫≠p nh·∫≠t l·∫ßn cu·ªëi
    set_column_width(worksheet, 'F', 100) # T√†i kho·∫£n
    set_column_width(worksheet, 'G', 200) # Link s·ª≠a
    set_column_width(worksheet, 'H', 50)  # Edit

    print(f"ƒê√£ xu·∫•t {len(products)} s·∫£n ph·∫©m l√™n Google Sheet!")


def main():
    # Th√¥ng tin WordPress
    site_url = "https://minhkhoicomputer.com"
    consumer_key = "ck_7ab1e2ba831d6a6f35bd4d66efdb431aa38ad067"
    consumer_secret = "cs_220abb9c658e837cd10c9d4eb268dbbdda52909f"
    
    # URL c·ªßa Google Sheet
    spreadsheet_url = "https://docs.google.com/spreadsheets/d/11rK_Z1g4q8E0monnd-AAtBizT5lcbhD8ggMX8GiLgx4/edit?gid=0"
    
    # --- Comment ho·∫∑c x√≥a d√≤ng g·ªçi check_single_product_api sau khi x√°c nh·∫≠n ƒë√£ fix ---
    # test_product_id = 2087
    # check_single_product_api(site_url, consumer_key, consumer_secret, test_product_id)

    # L·∫•y danh s√°ch s·∫£n ph·∫©m (s·ª≠ d·ª•ng h√†m Edit)
    print("ƒêang l·∫•y danh s√°ch s·∫£n ph·∫©m...")
    products = get_all_products(site_url, consumer_key, consumer_secret)
    
    # Xu·∫•t l√™n Google Sheet
    print("ƒêang xu·∫•t d·ªØ li·ªáu l√™n Google Sheet...")
    export_to_sheets(products, spreadsheet_url)

if __name__ == "__main__":
    main()
